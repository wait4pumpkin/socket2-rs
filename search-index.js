var searchIndex={};
searchIndex["socket2"] = {"doc":"Utilities for creating and using sockets.","i":[[3,"SockAddr","socket2","The address of a socket.",null,null],[3,"Socket","","Newtype, owned, wrapper around a system socket.",null,null],[3,"Domain","","Specification of the communication domain for a socket.",null,null],[3,"Type","","Specification of communication semantics on a socket.",null,null],[3,"Protocol","","Protocol specification used for creating sockets via…",null,null],[11,"from_raw_parts","","Constructs a `SockAddr` from its raw components.",0,[[["socklen_t"]],["sockaddr"]]],[11,"unix","","Constructs a `SockAddr` with the family `AF_UNIX` and the…",0,[[["p"]],[["sockaddr"],["result",["sockaddr"]]]]],[11,"as_inet","","Returns this address as a `SocketAddrV4` if it is in the…",0,[[["self"]],[["socketaddrv4"],["option",["socketaddrv4"]]]]],[11,"as_inet6","","Returns this address as a `SocketAddrV6` if it is in the…",0,[[["self"]],[["socketaddrv6"],["option",["socketaddrv6"]]]]],[11,"as_std","","Returns this address as a `SocketAddr` if it is in the…",0,[[["self"]],[["option",["socketaddr"]],["socketaddr"]]]],[11,"family","","Returns this address's family.",0,[[["self"]],["sa_family_t"]]],[11,"len","","Returns the size of this address in bytes.",0,[[["self"]],["socklen_t"]]],[11,"as_ptr","","Returns a raw pointer to the address.",0,[[["self"]]]],[11,"new","","Creates a new socket ready to be configured.",1,[[["domain"],["protocol"],["option",["protocol"]],["type"]],[["result",["socket"]],["socket"]]]],[11,"pair","","Creates a pair of sockets which are connected to each other.",1,[[["domain"],["protocol"],["option",["protocol"]],["type"]],["result"]]],[11,"into_tcp_stream","","Consumes this `Socket`, converting it to a `TcpStream`.",1,[[],["tcpstream"]]],[11,"into_tcp_listener","","Consumes this `Socket`, converting it to a `TcpListener`.",1,[[],["tcplistener"]]],[11,"into_udp_socket","","Consumes this `Socket`, converting it to a `UdpSocket`.",1,[[],["udpsocket"]]],[11,"into_unix_stream","","Consumes this `Socket`, converting it into a `UnixStream`.",1,[[],["unixstream"]]],[11,"into_unix_listener","","Consumes this `Socket`, converting it into a `UnixListener`.",1,[[],["unixlistener"]]],[11,"into_unix_datagram","","Consumes this `Socket`, converting it into a `UnixDatagram`.",1,[[],["unixdatagram"]]],[11,"connect","","Initiate a connection on this socket to the specified…",1,[[["sockaddr"],["self"]],["result"]]],[11,"connect_timeout","","Initiate a connection on this socket to the specified…",1,[[["duration"],["sockaddr"],["self"]],["result"]]],[11,"bind","","Binds this socket to the specified address.",1,[[["sockaddr"],["self"]],["result"]]],[11,"listen","","Mark a socket as ready to accept incoming connection…",1,[[["self"],["i32"]],["result"]]],[11,"accept","","Accept a new incoming connection from this listener.",1,[[["self"]],["result"]]],[11,"local_addr","","Returns the socket address of the local half of this TCP…",1,[[["self"]],[["sockaddr"],["result",["sockaddr"]]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP…",1,[[["self"]],[["sockaddr"],["result",["sockaddr"]]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying…",1,[[["self"]],[["result",["socket"]],["socket"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],[["result",["option"]],["option",["error"]]]]],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",1,[[["self"],["bool"]],["result"]]],[11,"shutdown","","Shuts down the read, write, or both halves of this…",1,[[["shutdown"],["self"]],["result"]]],[11,"recv","","Receives data on the socket from the remote address to…",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"recv_with_flags","","Identical to [`recv`] but allows for specification of…",1,[[["i32"],["self"]],[["result",["usize"]],["usize"]]]],[11,"recv_out_of_band","","Receives out-of-band (OOB) data on the socket from the…",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"peek","","Receives data on the socket from the remote adress to…",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"recv_from","","Receives data from the socket. On success, returns the…",1,[[["self"]],["result"]]],[11,"recv_from_with_flags","","Identical to [`recv_from`] but allows for specification of…",1,[[["i32"],["self"]],[["result",["usize"]],["usize"]]]],[11,"peek_from","","Receives data from the socket, without removing it from…",1,[[["self"]],["result"]]],[11,"send","","Sends data on the socket to a connected peer.",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"send_with_flags","","Identical to [`send`] but allows for specification of…",1,[[["i32"],["self"]],[["result",["usize"]],["usize"]]]],[11,"send_out_of_band","","Sends out-of-band (OOB) data on the socket to connected…",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"send_to","","Sends data on the socket to the given address. On success,…",1,[[["sockaddr"],["self"]],[["result",["usize"]],["usize"]]]],[11,"send_to_with_flags","","Identical to [`send_to`] but allows for specification of…",1,[[["i32"],["self"]],[["result",["usize"]],["usize"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,[[["self"]],[["u32"],["result",["u32"]]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["u32"],["self"]],["result"]]],[11,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this…",1,[[["self"]],[["u32"],["result",["u32"]]]]],[11,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this…",1,[[["u32"],["self"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"read_timeout","","Returns the read timeout of this socket.",1,[[["self"]],[["option",["duration"]],["result",["option"]]]]],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",1,[[["duration"],["self"],["option",["duration"]]],["result"]]],[11,"write_timeout","","Returns the write timeout of this socket.",1,[[["self"]],[["option",["duration"]],["result",["option"]]]]],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",1,[[["duration"],["self"],["option",["duration"]]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this…",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this…",1,[[["self"],["bool"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this…",1,[[["self"]],[["u32"],["result",["u32"]]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this…",1,[[["u32"],["self"]],["result"]]],[11,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for…",1,[[["self"]],[["u32"],["result",["u32"]]]]],[11,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for…",1,[[["u32"],["self"]],["result"]]],[11,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this…",1,[[["self"]],[["result",["ipv4addr"]],["ipv4addr"]]]],[11,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this…",1,[[["ipv4addr"],["self"]],["result"]]],[11,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this…",1,[[["self"]],[["u32"],["result",["u32"]]]]],[11,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this…",1,[[["u32"],["self"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for…",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for…",1,[[["self"],["bool"]],["result"]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,[[["ipv4addr"],["self"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,[[["ipv6addr"],["self"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,[[["ipv4addr"],["self"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,[[["ipv6addr"],["self"],["u32"]],["result"]]],[11,"linger","","Reads the linger duration for this socket by getting the…",1,[[["self"]],[["option",["duration"]],["result",["option"]]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the…",1,[[["duration"],["self"],["option",["duration"]]],["result"]]],[11,"reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",1,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",1,[[["self"],["usize"]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this…",1,[[["self"]],[["option",["duration"]],["result",["option"]]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on…",1,[[["duration"],["self"],["option",["duration"]]],["result"]]],[11,"out_of_band_inline","","Returns the value of the `SO_OOBINLINE` flag of the…",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_out_of_band_inline","","Sets the `SO_OOBINLINE` flag of the underlying socket. as…",1,[[["self"],["bool"]],["result"]]],[11,"reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",1,[[["self"]],[["result",["bool"]],["bool"]]]],[11,"set_reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",1,[[["self"],["bool"]],["result"]]],[18,"UNIX","","Domain for Unix socket communication, corresponding to…",2,null],[18,"PACKET","","Domain for low-level packet interface, corresponding to…",2,null],[11,"non_blocking","","Set `SOCK_NONBLOCK` on the `Type`.",3,[[],["type"]]],[11,"cloexec","","Set `SOCK_CLOEXEC` on the `Type`.",3,[[],["type"]]],[18,"IPV4","","Domain for IPv4 communication, corresponding to `AF_INET`.",2,null],[18,"IPV6","","Domain for IPv6 communication, corresponding to `AF_INET6`.",2,null],[11,"for_address","","Returns the correct domain for `address`.",2,[[["socketaddr"]],["domain"]]],[18,"STREAM","","Type corresponding to `SOCK_STREAM`.",3,null],[18,"DGRAM","","Type corresponding to `SOCK_DGRAM`.",3,null],[18,"SEQPACKET","","Type corresponding to `SOCK_SEQPACKET`.",3,null],[18,"RAW","","Type corresponding to `SOCK_RAW`.",3,null],[18,"ICMPV4","","Protocol corresponding to `ICMPv4`.",4,null],[18,"ICMPV6","","Protocol corresponding to `ICMPv6`.",4,null],[18,"TCP","","Protocol corresponding to `TCP`.",4,null],[18,"UDP","","Protocol corresponding to `UDP`.",4,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["socketaddrv4"]],["sockaddr"]]],[11,"from","","",0,[[["socketaddrv6"]],["sockaddr"]]],[11,"from","","",0,[[["socketaddr"]],["sockaddr"]]],[11,"from","","",1,[[["tcpstream"]],["socket"]]],[11,"from","","",1,[[["tcplistener"]],["socket"]]],[11,"from","","",1,[[["udpsocket"]],["socket"]]],[11,"from","","",1,[[["unixstream"]],["socket"]]],[11,"from","","",1,[[["unixlistener"]],["socket"]]],[11,"from","","",1,[[["unixdatagram"]],["socket"]]],[11,"from","","",2,[[["c_int"]],["domain"]]],[11,"from","","",3,[[["c_int"]],["type"]]],[11,"from","","",4,[[["c_int"]],["protocol"]]],[11,"clone","","",2,[[["self"]],["domain"]]],[11,"clone","","",3,[[["self"]],["type"]]],[11,"clone","","",4,[[["self"]],["protocol"]]],[11,"eq","","",2,[[["domain"],["self"]],["bool"]]],[11,"ne","","",2,[[["domain"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["type"]],["bool"]]],[11,"ne","","",3,[[["self"],["type"]],["bool"]]],[11,"eq","","",4,[[["protocol"],["self"]],["bool"]]],[11,"ne","","",4,[[["protocol"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"read","","",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write","","",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",1,[[["self"]],["result"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["socket"]]],[11,"into_raw_fd","","",1,[[],["c_int"]]]],"p":[[3,"SockAddr"],[3,"Socket"],[3,"Domain"],[3,"Type"],[3,"Protocol"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);